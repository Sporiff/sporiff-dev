---
import type * as shiki from 'shiki';
import { getHighlighter } from 'astro/components/Shiki.js';

export interface Props {
	/** The code to highlight. Required. */
	content: string;
	/**
	 * The language of your code.
	 * Supports all languages listed here: https://github.com/shikijs/shiki/blob/main/docs/languages.md#all-languages
	 * Instructions for loading a custom language: https://github.com/shikijs/shiki/blob/main/docs/languages.md#supporting-your-own-languages-with-shiki
	 *
	 * @default "plaintext"
	 */
	language?: shiki.Lang | shiki.ILanguageRegistration;
	/**
	 * The styling theme.
	 * Supports all themes listed here: https://github.com/shikijs/shiki/blob/main/docs/themes.md#all-themes
	 * Instructions for loading a custom theme: https://github.com/shikijs/shiki/blob/main/docs/themes.md#loading-theme
	 *
	 * @default "github-dark"
	 */
	theme?: shiki.IThemeRegistration;
	/**
	 * Enable word wrapping.
	 *  - true: enabled.
	 *  - false: disabled.
	 *  - null: All overflow styling removed. Code will overflow the element by default.
	 *
	 * @default false
	 */
	wrap?: boolean | null;
}

const { content, language = 'plaintext', theme = 'github-dark', wrap = false } = Astro.props;

/** Replace the shiki class name with a custom astro class name. */
function repairShikiTheme(html: string): string {
	// Replace "shiki" class naming with "astro"
	html = html.replace(/<pre class="(.*?)shiki(.*?)"/, '<pre class="$1astro-code$2"');
	// Handle code wrapping
	// if wrap=null, do nothing.
	if (wrap === false) {
		html = html.replace(/style="(.*?)"/, 'style="$1; overflow-x: auto;"');
	} else if (wrap === true) {
		html = html.replace(
			/style="(.*?)"/,
			'style="$1; overflow-x: auto; white-space: pre-wrap; word-wrap: break-word;"'
		);
	}
	return html;
}

const highlighter = await getHighlighter({
	theme,
	// Load custom language if passed an object, otherwise load the default
	langs: typeof language !== 'string' ? [language] : undefined,
});
const _html = highlighter.codeToHtml(content, {
	lang: typeof language === 'string' ? language : language.id,
});
const html = repairShikiTheme(_html);
---

<Fragment set:html={html} />
